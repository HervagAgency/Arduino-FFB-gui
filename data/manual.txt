Milos Rankovic
ranenbg@gmail.com
23.12.2022.
wheel control v2.5.1 - compatible with Arduino HEX versions fw-v220 (backward compatible with v170, v180, v190, v200 and v210)

About:
Wheel control GUI is made in windows programming environment called Processing v3.5.4, which is based on Java. It opperartes by directly reading HID values from Arduino such as axis and buttons. It uses RS232 or virtual serial port to send many settings that you may like to adjust (check firmware_info.txt for more details). The settings can be stored in Arduino EEPROM, such that they will be saved and automatically loaded at every powerup. Arduino firmware and GUI are developed and tested in Win10.
You can use Arduino Leonardo, Arduino Micro or Arduino Pro Micro boards. They need to have a correct bootloader. You can verify by pressing restart button, if the Arduino enters bootloader mode for about 8sec it is ok, LED will slowly blink during this time. If it instantly restarts you will need to upload bootloader. Complete description of that procedure is outside of the scope of this manual (https://www.arduino.cc/en/Tutorial/BuiltInExamples/ArduinoISP).

How to start wheel control:
[0] upload desired HEX file to your Arduino using XLoader
[1] configure the Gamepad input library
[2] congifure correct COM port of your Arduino

There are two ways to start wheel control. One is by starting exe file for which you will need the latest version of Java to be installed. The second option is to install Processing IDE v3.5.4 on your PC and run wheel_control.pde from it. You will need to install all missing libraries. Important is that wheel_control.pde with all other *.pde files must be located in the folder with the same name wheel_control, be carefull about this after downloading from github.
Before starting wheel control tool, a one time configuration will be needed. A pink window will appear showing two sides of buttons and axis. You need to connect each one by dragging a line. Just start from top and work your way to the bottom. Once done, click verify button. If no errors appear click use button.
Now a dialog window will appear and you will need to select at which COM port is your Arduino, by typing one of the letters (a, b, c,...). This is required only once, since selected COM port will be saved in COM_cfg.txt file. If the number of COM devices is not changed by plugging or unplugging any other COM devices, Arduino should stay at the same COM port. If there was a change, go in data folder of wheel control and delete COM_cfg.txt file. Start wheel control and you will see window for selecting COM port again. File COM_cfg.txt will be saved again with new COM port. Optionally you can just manually edit COM_cfg.txt with a correct COM port. The COM port selection window only appears if there is no COM_cfg.txt present in data folder of wheel control.

How to use wheel control:
[0] set your encoder CPR (CPR=4xPPR)
[1] set desired Rotation degrees
[2] manually align your wheel to center position, press center and then save button
[3] select PWM type (phase correct is recommended, but you can use fast top for twice higher frequency at the same resolution)
[4] select PWM mode (pwm+-, pwm+dir, pwm0.50.100-use or rcm)
[5] select PWM frequency (check firmware_info.txt for more details)
[6] press pwm button and close wheel control, restart or replug Arduino to apply new PWM settings, start wheel control

The utility supports user effects or sometimes called desktop effects. These are "allways on" effects that will be added to any other FFB effects which other games or application may send. You may enable certain desktop effects like spring, damper, inertia or friction by pressing a square button next to the corresponding slider. These effects may be usefull for DD wheels, to simulate some liveliness of AC motor like moment of inertia (inertia gain), autocentering (spring gain) or friction (friction gain).
Use overall gain to set the master volume or gain for all FFB effects. You may use min PWM slider to compensate for startup current and system friction when using other motor types than AC servo motors. It is very usefull for DC brushed motors especially.
The button next to overall gain is for enabling/disabling real time FFB monitor graph. It is extremely usefull for troubleshooting or fine tunning your FFB settings in the game and finding the point of clipping. It is directly showing an FFB signal over COM port, that a game is sending in 1sec time window. It is recommended not to keep it always on, its purpose is only for FFB signal inspection and making sure there is no clipping. Once you are happy wiht your FFB, disable the FFB monitor, not to cause any delays due to COM data transfer.
New feature is profile selector. Select one of the empty slots first. Make changes to the FFB settings as you wish and click store button. Type some name and click ok. This will save a profile into a txt file. Wheel control will look for any existing profiles at each start up, so you can load it. Note that PWM settings are not stored and loaded from a profile config.

Additional startup troubleshooting has been added from v2.0, such that startup problems will be easier to diagnose. Window is no longer white, and it shows some advanced setup info. Since v2.4 I have improved the text info messages in each window from setup process, to contain some more details and to be more user friendly.

Axis color setup:
The axis colors are stored in a axisColor.txt file in a HEX format. This file will be created at startup with default values if it does not already exist. If it exists then the axis colors will be loaded from it. First two letters are alpha channel, so you can leave this at FF and fill in the remaining 6 numbers. In following link you can get those 6 HEX numbers from RGB values.
https://www.rapidtables.com/convert/color/rgb-to-hex.html

XY analog shifter setup:
This version of wheel control allows you to setup an analog shifter. The shifter supports 8 gears + reverse, while you can edit its calibration limits by pressing "shifter" button. There are 5 pointers (sliders) which you can move with mouse by dragging. Make sure to release mouse left button while the cursor is still inside the pointer in order for change to take place. Once happy, you can click "save" button to store shifter calibration to Arduino (save values in EEPROM). There is an additional button that allows you to configure where a reverse gear will be. If the small button is red (not activated) the shifter is configured to 6 gears + reverse, while if the button is green (activated) then the reverse is in 8th gear. To activate reverse gear you need to press button0 (by default it's at Arduino pin D4, but may be elsewhere depending on firmware version and options).

Manual pedal axis calibration
In this version you can manual set pedal axis calibration limits and save them into Arduino EEPROM. The calibration values are automatically loaded at each powerup of Arduino. Each time you start wheel control it will ask Arduino for latest calibration values and update the sliders accordingly. In order to set calibration limits first press "manual cal" button to unhide the calibration sliders. Move sliders to ther lowest (0) and maximum (4095) positions if they are not already there. Now press each pedal to its full range and set its corresponding maximum slider to a value slightly below the pedal axis value. Once done, now move back each pedal into ther lowest position and set the minimim slider to a value slightly above the pedal axis value. Pedal axis values should show a full range 0-4095 if done correctly. Once happy with your pedal travel and calibration limits you can press "save" button.

RCM pwm mode settings
Some RC servos and other brushless motor drivers require a special pwm mode for their operation, called RCM or PPM. This version of wheel control supports the lattest version of firmware fw-v21X where I have added this new pwm mode. Note that not all frequencies are available due to the nature of this mode. A zero force is represented as a square wave with a pulse width of 1.5ms, while full left force has 1.0ms pulse width and full right force has 2.0ms pulse width. This imposes a limit for the max allowed frequency of 500Hz which corresponds to 2ms period. Any higher frequency than 500Hz would have a lower period, therefore it does not allow to achieve the full range of right (positive) forces. For that reason I have labeled such frequencies as NA - not available. I have implemented some safety features in this version of wheel control, such that you can't select or send incorrect pwm settings to firmware.

Using encoder Z-index
If you encoder has a 3rd channel called Z-index you can use HEX firmware with "z" option to automatically set the zero angle. This version of wheel control in combination with HEX v22Xz (X-0,1,2,3) allows you to reset the Z-index offset in the firmware and set a new one. After firmware upload and first start of wheel control you can re-align your wheel to a desired zero deg position and press center button, then press save button to remember the settings in Arduino memory. If you are not happy with the centering and wish to do it again, you have to press the z button first and repeat the above described process.

Hopefully everything else will be self explanatory, enjoy :)
rane.



